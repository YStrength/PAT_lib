# include <stdio.h>
#define MaxTree 10
#define ElementType char
#define Tree int
#define Null -1
struct TreeNode
{
	ElementType Element;
	Tree Left;
	Tree Right;
}T1[MaxTree],T2[MaxTree];

Tree BuildTree(struct TreeNode T[])
{
	int N,i,Root;
	char cl,cr;
	scanf("%d\n",&N);
	int check[10]={0};
	if(N!=0){
		for(i=0;i<N;i++){
			scanf("%c %c %c\n",&T[i].Element,&cl,&cr);
			if(cl!='-'){
				T[i].Left=cl-'0';
				check[T[i].Left]=1;
			}
			else {
			T[i].Left=Null;
			}
			if(cr!='-'){
				T[i].Right=cr-'0';
				check[T[i].Right]=1;
			}
			else {
			T[i].Right=Null;
			}
		}
		for(i=0;i<N;i++){
			if(check[i]!=1)break;
		} 
		Root=i;
	return Root;
	}
	else return Null;
}

int HomoTree (Tree R1,Tree R2)
{
	if((R1==Null)&&(R2==Null))
		return 1;
	if(((R1!=Null)&&(R2==Null))||((R1==Null)&&(R2!=Null)))
		return 0;
	if((T1[R1].Element!=T2[R2].Element))
		return 0;
	if((T1[R1].Left==Null)&&(T2[R2].Left))
		return HomoTree(T1[R1].Right,T2[R2].Right);
	if((T1[R1].Left!=Null)&&(T2[R2].Left!=Null)&&((T1[T1[R1].Left].Element)==(T2[T2[R2].Left].Element)))
		return (HomoTree(T1[R1].Left,T2[R2].Left)&&HomoTree(T1[R1].Right,T2[R2].Right));
	else return(HomoTree(T1[R1].Left,T2[R2].Right)&&HomoTree(T1[R1].Right,T2[R2].Left));
}		

int main()
{
	int R1,R2,ju;
	R1=BuildTree(T1);
	R2=BuildTree(T2);
//	printf("%c %d %d\n",T1[2].Element,T1[2].Left,T1[2].Right);
//	printf("%d",R1);
	ju=HomoTree(R1,R2);
	if(ju==1) printf("Yes");
	else printf("No");
	return 0;	
}
